# YOLOv3 🚀 by Ultralytics, GPL-3.0 license


# depth_multiple：表示Conv模块的缩放因子，将所有块的乘上该参数得到最终个数。
# width_multiple：表示卷积通道的缩放因子，就是将配置里面的backbone和head部分有关Conv通道的设置，全部乘以该系数。
# 通过这两个参数就可以实现不同复杂度的模型设计。
# 这两个参数是Ultralytics公司出品的yolov5里面的参数，我们这个yolov3也同样是Ultralytics公司出品的，因此沿用了这个参数。(原本Joseph Redmon是没有这个参数的)
# Parameters
nc: 20  # 模型识别的类别数量
depth_multiple: 1.0  # 模型深度参数
width_multiple: 1.0  # 模型通道参数


# yolov3初始化了9个anchors，在三个Detect层使用（3个feature map）中使用，每个feature map的每个grid_cell都有三个anchor进行预测。
# yolov3根据k-means得到了这么3组anchors，对于很多数据集而言确实挺合适的。
# 但是也不能保证这3组anchors就适用于所有的数据集。
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32




# darknet53 backbone
backbone:
  # [from, number, module, args]
  # from：表示当前模块的输入来自那一层的输出，-1表示来自上一层的输出。
  # number：表示本模块的理论重复次数，1表示只有一个，3表示重复3次。实际的重复次数:number×depth_multiple
  # module：模块名，通过这个类名去common.py中寻找相应的类，进行模块化的搭建网络。
  # args: 在网络搭建过程中根据不同层进行改变，是模块搭建所需参数的列表，包括channel，kernel_size，stride，padding，bias等。
  [[-1, 1, Conv, [32, 3, 1]],  # 0
   [-1, 1, Conv, [64, 3, 2]],  # 1-P1/2
   [-1, 1, Bottleneck, [64]],
   [-1, 1, Conv, [128, 3, 2]],  # 3-P2/4
   [-1, 2, Bottleneck, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 5-P3/8
   [-1, 8, Bottleneck, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 7-P4/16
   [-1, 8, Bottleneck, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 9-P5/32
   [-1, 4, Bottleneck, [1024]],  # 10
  ]

# YOLOv3 head
# head = PANet+Detect 作者没有区分neck模块，所以head部分包含了PANet+Detect部分
# [from, number, module, args]
  # from: 表示当前模块的输入来自那一层的输出，-1表示来自上一层的输出。不过这里可以为list，就是这层的输入由所层输出concat而来。
  # number：表示本模块的理论重复次数，1表示只有一个，3表示重复3次。实际的重复次数:number×depth_multiple
  # module：模块类名，通过这个类名去common.py中寻找相应的类，进行模块化的搭建网络。
  # args：是一个list，是模块搭建所需参数的列表，包括channel，kernel_size，stride，padding，bias等
head:
  [[-1, 1, Bottleneck, [1024, False]],
   [-1, 1, Conv, [512, [1, 1]]],
   [-1, 1, Conv, [1024, 3, 1]],
   [-1, 1, Conv, [512, 1, 1]],
   [-1, 1, Conv, [1024, 3, 1]],  # 15 (P5/32-large)

   [-2, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 8], 1, Concat, [1]],  # cat backbone P4
   [-1, 1, Bottleneck, [512, False]],
   [-1, 1, Bottleneck, [512, False]],
   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, Conv, [512, 3, 1]],  # 22 (P4/16-medium)

   [-2, 1, Conv, [128, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P3
   [-1, 1, Bottleneck, [256, False]],
   [-1, 2, Bottleneck, [256, False]],  # 27 (P3/8-small)

   [[27, 22, 15], 1, Detect, [nc, anchors]],   # Detect(P3, P4, P5)
  ]
